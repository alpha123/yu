* Unicode
** [[http://www.utf8everywhere.org/][utf-8 everywhere]]
Even for CJK utf-8 can be more efficient and frequently is not less efficient.
** _No_ unqualified indexing or length operators
Indexing or length must take place through code points, graphemes, bytes (code
units, but utf-8 everywhere so there's no difference). Making intention about
string usage explicit removes a whole host of potential problems. \\
Examples:
- Moving forward or backward in a text editor would use graphemes
- Writing a file would use bytes
** Iteration should be the preferred method of accessing strings
Random-access in strings is usually not that useful anyway. Grapheme, code
point, and byte iterators should all be provided.
** Normalization                                                       :TBD:
There are pros and cons to normalizing to NFC by default. Determine if there are
use cases that would be broken by normalization or if it would lead to
non-intuitive semantics. If strings aren't normalized, should hashing make a
distinction between composed and non-composed Hangul?
** Regexes
Regular expressions are a little hard: should `.` be a code point or a grapheme?
Two modes of regexes should be offered. Regular expressions on bytes are not
useful and an easy way to break utf-8 encoding.

Defaulting to grapheme mode seems like the smarter choice, as they're frequently
used for parsing or validating user-inputted data.
** Parsers
Similar to regexes-after all, they are two sides of the same coin. However,
parsing binary files is rather useful and so binary-mode parsers should be
provided.
** I/O
Binary streams are like C strings, text streams are utf-8. No exceptions.
Converting from other encodings to utf-8 could be a separate stream type in the
standard library that wraps a binary stream.

* Representation
Strings and integers are anecdotally the most commonly used data types in high
level languages. String representation will have a significant effect on
performance. Most strings are small, and avoiding allocation for those will put
much less pressure on the GC.
** Standard string representation
Heap-allocated immutable interned utf-8 encoded NFC composed bytes.
** Short strings
_Not_ heap allocated! We have 48 bits to stuff short strings into nanboxed
doubles. Compress strings with [[https://github.com/Ed-von-Schleck/shoco][shoco]] to expand the class of strings that we can
fit into doubles. \\
Restrictions:
- Must be ASCII; the majority of short strings are identifiers internal to code,
  which tends to be ASCII even in CJK locales.
- Must compress to 6 or fewer bytes
- Length can be stored as the auxillary type in nanboxed values. Shoco can tell
  us the uncompressed size.
See https://github.com/zuiderkwast/nanbox/blob/master/nanbox_shortstring.h
** Long immutable strings                                              :TBD:
Consider keeping a global dictionary of frequent string parts and store long
strings as entries into this dictionary. For example, run the [[http://www.sequitur.info/][sequitur]] algorithm
on long strings and store entries into the global sequitur dictionary. Storing
strings in this way preserves good random access characteristics while also
being reasonably space efficient. Cleaning the dictionary periodically would
probably have to happen to avoid resource leaks, which might have to recompress
every relevant string. Fortunately, long strings tend to be fairly long-lived.

Note that YuVM avoids long strings for things like I/O with its streams
implementation and usage of ropes and hierarchical streams/generators.
** Medium-to-large frequently mutated strings
Should be stored as ropes, somewhat like SpiderMonkey.
